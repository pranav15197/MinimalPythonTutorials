{"version":3,"sources":["assets/download_python.png","assets/terminal.gif","pages/Setup.js","pages/HelloWorld.js","pages/Index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Setup","className","to","target","href","alt","src","download_python","valign","width","class","terminal","HelloWorld","Index","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,sC,wNC2H5BC,MAtHf,WACE,OACE,yBAAKC,UAAU,aACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,0EACA,6BACA,0FAEE,4BACE,0DACA,6EAGJ,6BACA,8CACA,+CACmB,qCADnB,OACoC,kCADpC,gFAIA,gEAEa,uBAAGC,OAAO,QAAQC,KAAK,qCAAvB,WAFb,wGAMA,2BACE,yBAAKC,IAAI,kBAAkBC,IAAKC,OAElC,gNAKA,6BACA,0DACA,gFAEgC,uCAFhC,6IAMA,+BACE,4BACE,wBAAIC,OAAO,MAAMC,MAAM,OAAvB,UACA,0DAEE,0BAAMC,MAAM,OAAZ,WAFF,KAGE,0BAAMA,MAAM,OAAZ,OAHF,KAIE,0BAAMA,MAAM,OAAZ,OAGJ,4BACE,wBAAIF,OAAO,MAAMC,MAAM,OAAvB,OACA,qCACQ,0BAAMC,MAAM,OAAZ,WADR,KAEE,0BAAMA,MAAM,OAAZ,KAFF,6EAMF,4BACE,wBAAIF,OAAO,MAAMC,MAAM,OAAvB,WACA,gEACmC,6CADnC,uBAKJ,4EACgD,qCADhD,iEAGE,yBAAKH,IAAKK,IAAUN,IAAI,oBAH1B,kCAIiC,2CAJjC,mMAMuG,qCANvG,qBAQA,6FAGA,+LAKA,6BACA,0DACA,kQAKA,4QAKA,iQAGoC,uBAAGF,OAAO,QAAQC,KAAK,0CAAvB,QAHpC,KAKA,6BACA,uCACA,6NAKA,qGAIA,kDAEA,kBAAC,IAAD,CAAMF,GAAG,gBAAT,mBCvGSU,MAXf,WACE,OACE,yBAAKX,UAAU,aACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,4CACA,6BACA,mCCYSW,MAlBf,WACE,OACE,yBAAKZ,UAAU,aACb,yCACA,6BACA,sHAGA,6FAGA,6BACA,kBAAC,IAAD,CAAMC,GAAG,UAAT,iDACA,kBAAC,IAAD,CAAMA,GAAG,gBAAT,qBCISY,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UAAS,kBAAC,EAAD,OACrB,kBAAC,IAAD,CAAOA,KAAK,gBAAe,kBAAC,EAAD,OAC3B,kBAAC,IAAD,CAAOA,KAAK,KAAI,kBAAC,EAAD,UCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.04fcc825.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/download_python.52caeb2a.png\";","module.exports = __webpack_public_path__ + \"static/media/terminal.757c1dbb.gif\";","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport download_python from '../assets/download_python.png'\nimport terminal from '../assets/terminal.gif'\n\nfunction Setup() {\n  return (\n    <div className=\"container\">\n      <Link to=\"/\">Home</Link>\n      <h1>Setup your computer for python development</h1>\n      <br/>\n      <p>\n        Setting up python is extremely easy. We just need two things\n        <ol>\n          <li>We need to install python.</li>\n          <li>We need a code editor to write python code.</li>\n        </ol>\n      </p>\n      <br/>\n      <h2>Install Python</h2>\n      <p>\n        If you are using <b>Ubuntu</b> or <b>Mac</b>, you can skip this step.\n        Python will be already installed on your computer.\n      </p>\n      <p>\n        If you are on windows,\n        visit this <a target=\"blank\" href='https://www.python.org/downloads/'>webpage</a> and download\n        the latest python version by clicking the big yellow button that says download\n        python.\n      </p>\n      <p>\n        <img alt=\"download python\" src={download_python}/>\n      </p>\n      <p>\n        Once the .exe file is downloaded, run it by double-clicking on it. Then just like\n        any other installation on windows, just keep clicking next untill the installation\n        is complete. \n      </p>\n      <br/>\n      <h2>Check if your python works</h2>\n      <p>  \n        To make sure python\n        is working you need to open a <b>terminal</b>. A terminal lets you\n        directly type in commands that your computer can understand. Here's how\n        you can open the terminal on your computer.\n      </p> \n      <table>\n        <tr>\n          <td valign=\"top\" width=\"100\">Ubuntu</td>\n          <td>\n            you can do this by pressing \n            <span class=\"key\">Control</span> + \n            <span class=\"key\">Alt</span> + \n            <span class=\"key\">T</span>\n          </td>\n        </tr>\n        <tr>\n          <td valign=\"top\" width=\"100\">Mac</td>\n          <td>\n            press <span class=\"key\">Command</span> +\n            <span class=\"key\">P</span> to open the spotlight search. \n            Then search for terminal and press enter.\n          </td>\n        </tr>\n        <tr>\n          <td valign=\"top\" width=\"100\">Windows</td>\n          <td>\n            Go to the start menu. Search for <b>Command Prompt</b> and click on it.\n          </td>\n        </tr>\n      </table>\n      <p>\n        Once you have the terminal open, just type in <b>python</b> and press enter.\n        Hopefully you would see something like this.\n        <img src={terminal} alt=\"python terminal\" />\n        What you see above is called a <b>python shell</b>. It allows you to run\n        python commands. You can give it a try. type 2 + 2 and press enter.\n        You should see the answer 4 appear on the next line. Pretty cool right? To close the shell just type <b>exit()</b> and press enter.\n      </p>\n      <p>\n        Congratulations! you now have python working on your computer.\n      </p>\n      <p>\n        Terminals are a programmer's best friend. I know it feels confusing and even \n        scary to some, but it's important that you get used to them. You'll thank me\n        later.\n      </p>\n      <br/>\n      <h2>Install Visual Studio Code</h2>\n      <p>\n        Technically you can just use the python shell to write and run python code.\n        But most programmes that you will write will be 100s or even 1000s of lines long.\n        It doesn't make sense to type the entire code in the shell everytime.\n      </p>\n      <p>\n        In general, we write code in text files. Think of these as recipes. Your computer\n        is like a cook. You write the recipe of the dish on a piece of paper and hand \n        it to the computer, which then reads the recipe line by line and executes it.\n      </p>\n      <p>\n        To write text files, we need a Text editor. While there are loads of good text editors\n        to choose from, I recommend Visual Studio Code (or just VSCode in short). To download and install it, you\n        can follow the instructions given <a target=\"blank\" href=\"https://code.visualstudio.com/download\">here</a>.\n      </p>\n      <br/>\n      <h2>Summary</h2>\n      <p>\n        You now have everything you need in order to learn and write python code. From now\n        on I'll assume that you know how to open the terminal on your computer, and that you have \n        VSCode installed.\n      </p>\n      <p>\n        So let's not waste any more time and move to your first real tutorial!\n      </p>\n      \n      <footer>\n      Next tutorial -\n      <Link to=\"/hello-world\">Hello World!</Link>\n      </footer>\n    </div>\n  );\n}\n\nexport default Setup\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction HelloWorld() {\n  return (\n    <div className=\"container\">\n      <Link to=\"/\">Home</Link>\n      <h1>Hello World!</h1>\n      <br/>\n      <footer></footer>\n    </div>\n  );\n}\n\nexport default HelloWorld\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction Index() {\n  return (\n    <div className=\"container\">\n      <h1>Hi There!</h1>\n      <br/>\n      <p>\n        I have written some very basic python tutorials. These are aimed at absolute beginners.\n      </p>\n      <p>\n        So if you have a few hours to kill, why not give these a shot!\n      </p>\n      <br/>\n      <Link to=\"/setup\">1. Setup your computer for python development</Link>\n      <Link to=\"/hello-world\">2. Hello World!</Link>\n    </div>\n  );\n}\n\nexport default Index\n","import React from 'react'\nimport './App.css'\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom'\n\nimport Setup from './pages/Setup';\nimport HelloWorld from './pages/HelloWorld';\nimport Index from './pages/Index';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/setup\"><Setup /></Route>\n        <Route path=\"/hello-world\"><HelloWorld /></Route>\n        <Route path=\"/\"><Index /></Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}